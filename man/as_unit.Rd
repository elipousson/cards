% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_unit.R
\name{as_unit}
\alias{as_unit}
\alias{as_unit_type}
\alias{convert_unit_type}
\alias{is_unit_type}
\alias{is_same_unit_type}
\title{Helper functions for grid units}
\usage{
as_unit(
  x,
  units = NULL,
  data = NULL,
  recurse = FALSE,
  arg = caller_arg(x),
  call = parent.frame()
)

as_unit_type(
  x,
  recurse = FALSE,
  data = NULL,
  arg = caller_arg(x),
  call = parent.frame()
)

convert_unit_type(
  x,
  from = NULL,
  to = NULL,
  typeFrom = "dimension",
  valueOnly = FALSE,
  ...
)

is_unit_type(x, ...)

is_same_unit_type(x, y, recurse = FALSE, data = NULL)
}
\arguments{
\item{x}{A numeric vector.}

\item{units}{A character vector specifying the units for the
    corresponding numeric values.}

\item{data}{This argument is used to supply extra information
    for special \code{unit} types.}

\item{recurse}{Whether to recurse into complex units.}

\item{arg}{Passed to \code{\link[=cli_abort]{cli_abort()}} to improve internal error messages.}

\item{call}{The execution environment of a currently running
function, e.g. \code{call = caller_env()}. The corresponding function
call is retrieved and mentioned in error messages as the source
of the error.

You only need to supply \code{call} when throwing a condition from a
helper function which wouldn't be relevant to mention in the
message.

Can also be \code{NULL} or a \link[rlang:topic-defuse]{defused function call} to
respectively not display any call or hard-code a code to display.

For more information about error calls, see \ifelse{html}{\link[rlang:topic-error-call]{Including function calls in error messages}}{\link[rlang:topic-error-call]{Including function calls in error messages}}.}

\item{from}{Unit to convert from. If \code{NULL} and x is not a units object,
convert to \code{to} units with a warning.}

\item{to}{Unit to convert to. Passed to unitTo parameter of
\code{\link[grid:grid.convert]{grid::convertUnit()}}. If \code{NULL}, return x as is.}

\item{typeFrom}{Passed to typeFrom parameter of \code{\link[grid:grid.convert]{grid::convertUnit()}}.
Defaults to "dimension".}

\item{valueOnly}{Passed to valueOnly parameter of \code{\link[grid:grid.convert]{grid::convertUnit()}}.
Defaults to \code{FALSE}.}

\item{...}{
  Arguments passed on to \code{\link[grid:grid.convert]{grid::convertUnit}}
  \describe{
    \item{\code{axisFrom}}{ Either \code{"x"} or \code{"y"} to indicate
    whether the unit object represents a value in the x- or
    y-direction. }
    \item{\code{axisTo}}{ Same as \code{axisFrom}, but applies to the unit object
    that is to be created. }
    \item{\code{typeTo}}{ Same as \code{typeFrom}, but applies to the unit object
    that is to be created. }
  }}

\item{y}{Object to compare to x.}
}
\description{
\itemize{
\item \code{\link[=as_unit]{as_unit()}}: Convert to a unit (allowing unit objects as units)
\item \code{\link[=as_unit_type]{as_unit_type()}}: Convert to unit type (or checking unit types)
\item \code{\link[=convert_unit_type]{convert_unit_type()}}: Convert x from one unit type to another (preserving
names for named vectors)
\item \code{\link[=is_unit_type]{is_unit_type()}}: Is x a character vector with a unit type supported by the
grid package or a unit object with a supported type?
\item \code{\link[=is_same_unit_type]{is_same_unit_type()}}: Are x and y the same unit type?
}

Note, when \code{\link[=as_unit_type]{as_unit_type()}} is used on a margin object, it returns the unique
unit type as a length 1 character vector not a length 4 character vector as
you could expect with other length 4 input objects.
}
\examples{

inch <- as_unit(1, "in")

inch

as_unit(10, inch)

as_unit(inch, "cm")

as_unit(inch)

convert_unit_type(inch, to = "cm")

convert_unit_type(c(10, 100), from = "mm", to = "cm")

is_unit_type("inch")

is_unit_type("inchs")

is_same_unit_type(inch, "in")

is_same_unit_type("pt", "points")

}
