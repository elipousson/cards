[{"path":"https://elipousson.github.io/cards/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Eli Pousson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elipousson.github.io/cards/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/cards/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2022). cards: Plot Playing Cards. https://github.com/elipousson/cards, https://elipousson.github.io/cards/.","code":"@Manual{,   title = {cards: Plot Playing Cards},   author = {Eli Pousson},   year = {2022},   note = {https://github.com/elipousson/cards, https://elipousson.github.io/cards/}, }"},{"path":"https://elipousson.github.io/cards/index.html","id":"cards","dir":"","previous_headings":"","what":"Plot Playing Cards","title":"Plot Playing Cards","text":"goal cards …","code":""},{"path":"https://elipousson.github.io/cards/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plot Playing Cards","text":"can install development version cards like :","code":"# pak::pkg_install(\"elipousson/cards\")"},{"path":"https://elipousson.github.io/cards/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Plot Playing Cards","text":"basic example shows solve common problem: cards includes data standard page sizes including sizes papers, photo prints, postcards, playing cards. cards uses ggplot2 create plots individual cards patchwork assemble card plots page layouts print.   cards currently limited features additional features expected include multi-page layouts, control position card elements, preset card formats/designs, appropriate handling cut-lines DIY card printing.","code":"library(cards) get_paper(\"Letter\") #> # A tibble: 1 × 9 #>   name      series size   standard units width height orientation type  #>   <list>    <chr>  <list> <chr>    <chr> <dbl>  <dbl> <chr>       <chr> #> 1 <chr [1]> <NA>   <NULL> ANSI     in      8.5     11 portrait    paper  get_paper(\"Letter\", orientation = \"landscape\") #> # A tibble: 1 × 9 #>   name      series size   standard units width height orientation type  #>   <list>    <chr>  <list> <chr>    <chr> <dbl>  <dbl> <chr>       <chr> #> 1 <chr [1]> <NA>   <NULL> ANSI     in       11    8.5 landscape   paper  get_card(\"Poker\") #> # A tibble: 1 × 9 #>   name      series size   standard units width height orientation type  #>   <list>    <chr>  <list> <chr>    <chr> <dbl>  <dbl> <chr>       <chr> #> 1 <chr [1]> <NA>   <NULL> <NA>     in      2.5    3.5 portrait    card cards <-   plot_cards(     \"Poker\",     n = 8,     number = TRUE,     border = TRUE,     size = 4,     linewidth = 0.5,     text = rep(c(\"\\U2664\", \"\\U2661\", \"\\U2662\", \"\\U2667\"), 2), # \"♤\", \"♡\", \"♢\", \"♧\"      color = \"yellow\"     )  cards[[1]] layout_cards(cards, paper = \"Letter\", orientation = \"landscape\")"},{"path":"https://elipousson.github.io/cards/reference/as_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for grid units — as_unit","title":"Helper functions for grid units — as_unit","text":"as_unit(): Convert unit (allowing unit objects units) as_unit_type(): Convert unit type (checking unit types) convert_unit_type(): Convert x one unit type another (preserving names named vectors) is_same_unit_type(): x y unit type?","code":""},{"path":"https://elipousson.github.io/cards/reference/as_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for grid units — as_unit","text":"","code":"as_unit(   x,   units = NULL,   data = NULL,   recurse = FALSE,   arg = caller_arg(x),   call = parent.frame() )  as_unit_type(x, recurse = FALSE, arg = caller_arg(x), call = parent.frame())  convert_unit_type(   x,   from = NULL,   to = NULL,   typeFrom = \"dimension\",   valueOnly = FALSE,   ... )  is_same_unit_type(x, y, recurse = FALSE)"},{"path":"https://elipousson.github.io/cards/reference/as_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for grid units — as_unit","text":"x numeric vector. units character vector specifying units     corresponding numeric values. data argument used supply extra information     special unit types. recurse Whether recurse complex units. arg Passed cli_abort() improve internal error messages. call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages. Unit convert . NULL x units object, convert units warning. Unit convert . Passed unitTo parameter grid::convertUnit(). NULL, return x . typeFrom Passed typeFrom parameter grid::convertUnit(). Defaults \"dimension\". valueOnly Passed valueOnly parameter grid::convertUnit(). Defaults FALSE. ... Arguments passed grid::convertUnit axisFrom Either \"x\" \"y\" indicate     whether unit object represents value x-     y-direction. axisTo axisFrom, applies unit object     created. typeTo typeFrom, applies unit object     created. y Object compare x.","code":""},{"path":"https://elipousson.github.io/cards/reference/as_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for grid units — as_unit","text":"","code":"inch <- as_unit(1, \"in\")  inch #> [1] 1inches  as_unit(10, inch) #> [1] 10inches  as_unit(inch, \"cm\") #> [1] 1cm  as_unit(inch) #> [1] 1inches  convert_unit_type(inch, to = \"cm\") #> [1] 2.54cm  convert_unit_type(c(10, 100), from = \"mm\", to = \"cm\") #> [1] 1cm  10cm  is_same_unit_type(inch, \"in\") #> [1] TRUE  is_same_unit_type(\"pt\", \"points\") #> [1] TRUE"},{"path":"https://elipousson.github.io/cards/reference/card_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard card sizes — card_sizes","title":"Standard card sizes — card_sizes","text":"Reference table common playing card sizes get_card(). Data subset paper_sizes data included sfext package.","code":""},{"path":"https://elipousson.github.io/cards/reference/card_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard card sizes — card_sizes","text":"","code":"card_sizes"},{"path":"https://elipousson.github.io/cards/reference/card_sizes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard card sizes — card_sizes","text":"data frame 5 rows 6 variables: name Name card units Units (\"\" \"mm\") dimensions width Width units height Height units orientation Portrait (width less height), landscape, square","code":""},{"path":"https://elipousson.github.io/cards/reference/cards-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cards: Plot Playing Cards — cards-package","title":"cards: Plot Playing Cards — cards-package","text":"Make simple playing cards ggplot2.","code":""},{"path":[]},{"path":"https://elipousson.github.io/cards/reference/cards-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cards: Plot Playing Cards — cards-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/cards/reference/get_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a paper or card size based on name, dimensions, orientation, or type — get_page","title":"Get a paper or card size based on name, dimensions, orientation, or type — get_page","text":"get_page() filters page_sizes one variables option reorient page dimensions convert page units. get_paper() equivalent get_page() without option set units, type, reorient parameters. get_card() equivalent get_paper() type = \"card\" string \"card\" attached end provided name value. get_page_dims() returns width height single page. convert_page_units() uses convert_unit_type() convert unit used page dimensions.","code":""},{"path":"https://elipousson.github.io/cards/reference/get_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a paper or card size based on name, dimensions, orientation, or type — get_page","text":"","code":"get_page(   name = NULL,   width = NULL,   height = NULL,   orientation = NULL,   reorient = TRUE,   units = NULL,   type = NULL )  get_paper(name = NULL, width = NULL, height = NULL, orientation = NULL)  get_card(name = NULL, width = NULL, height = NULL, orientation = NULL)  get_page_dims(   page = NULL,   width = NULL,   height = NULL,   orientation = NULL,   cols = c(\"width\", \"height\"),   arg = caller_arg(page),   call = parent.frame(),   ... )  convert_page_units(page, units = NULL)"},{"path":"https://elipousson.github.io/cards/reference/get_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a paper or card size based on name, dimensions, orientation, or type — get_page","text":"name Page name, e.g. \"letter\", case sensitive, Default: NULL width Page width \"\", \"px\" \"mm\" units. Default: NULL height Page height \"\", \"px\" \"mm\" units. Default: NULL orientation Page orientation, Default: NULL reorient TRUE orientation NULL, flip width height dimensions pages match provided orientation. Set reorient = FALSE filter pages orientation. units Units convert page dimensions using convert_unit_type(). type Page type, Options include \"paper\", \"social\", \"postcard\", \"print\", \"card\", \"screen\". Default: NULL cols Length 2 character vector column names page dimensions. Defaults c(\"width\", \"height\"). arg, call Passed cli_abort() improve internal error messages. ... Additional parameters passed get_page_dims() get_page() page character object.","code":""},{"path":"https://elipousson.github.io/cards/reference/get_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a paper or card size based on name, dimensions, orientation, or type — get_page","text":"data.frame page, paper, card name dimensions.","code":""},{"path":"https://elipousson.github.io/cards/reference/get_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a paper or card size based on name, dimensions, orientation, or type — get_page","text":"","code":"get_paper(\"letter\") #> # A tibble: 1 × 9 #>   name      series size   standard units width height orientation type  #>   <list>    <chr>  <list> <chr>    <chr> <dbl>  <dbl> <chr>       <chr> #> 1 <chr [1]> NA     <NULL> ANSI     in      8.5     11 portrait    paper  get_paper(\"letter\", orientation = \"landscape\") #> # A tibble: 1 × 9 #>   name      series size   standard units width height orientation type  #>   <list>    <chr>  <list> <chr>    <chr> <dbl>  <dbl> <chr>       <chr> #> 1 <chr [1]> NA     <NULL> ANSI     in       11    8.5 landscape   paper  get_page(orientation = \"square\", reorient = FALSE) #> # A tibble: 4 × 9 #>   name      series size      standard         units  width height orient…¹ type  #>   <list>    <chr>  <list>    <chr>            <chr>  <dbl>  <dbl> <chr>    <chr> #> 1 <chr [1]> NA     <NULL>    British Imperial in      10     10   square   paper #> 2 <chr [1]> NA     <chr [1]> Instagram        px    1080   1080   square   soci… #> 3 <chr [1]> C      <dbl [1]> ISO              mm      28     28   square   paper #> 4 <chr [1]> NA     <NULL>    NA               in       2.5    2.5 square   card  #> # … with abbreviated variable name ¹​orientation  get_page(\"ledger\", units = \"cm\") #> # A tibble: 1 × 9 #>   name      series size   standard units width height orientation type  #>   <list>    <chr>  <list> <chr>    <chr> <dbl>  <dbl> <chr>       <chr> #> 1 <chr [1]> NA     <NULL> ANSI     cm     27.9   43.2 portrait    paper  get_card(\"Tarot\") #> # A tibble: 1 × 9 #>   name      series size   standard units width height orientation type  #>   <list>    <chr>  <list> <chr>    <chr> <dbl>  <dbl> <chr>       <chr> #> 1 <chr [1]> NA     <NULL> NA       in     2.75   4.75 portrait    card"},{"path":"https://elipousson.github.io/cards/reference/layout_cards.html","id":null,"dir":"Reference","previous_headings":"","what":"Use patchwork to layout cards on a paper — layout_cards","title":"Use patchwork to layout cards on a paper — layout_cards","text":"Use patchwork layout cards paper","code":""},{"path":"https://elipousson.github.io/cards/reference/layout_cards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use patchwork to layout cards on a paper — layout_cards","text":"","code":"layout_cards(   card = NULL,   paper = NULL,   width = NULL,   height = NULL,   orientation = \"landscape\",   byrow = FALSE,   ... )"},{"path":"https://elipousson.github.io/cards/reference/layout_cards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use patchwork to layout cards on a paper — layout_cards","text":"card Card name, data.frame width height columns, list ggplot2 objects card plots. Default: NULL paper Paper name data.frame width height columns. Optional width height provided, Default: NULL width, height Paper width height, Default: NULL orientation Paper orientation, Optional width height provided, Default: 'landscape' byrow Analogous byrow matrix(). FALSE plots filled column-major order ... Arguments passed patchwork::wrap_plots widths,heights relative widths heights column row grid. get repeated match dimensions grid. guides string specifying guides treated layout. 'collect' collect guides given nesting level, removing duplicates. 'keep' stop collection level let guides placed alongside plot. auto allow guides collected upper level tries, place alongside plot .  modify default guide \"position\" theme(legend.position=...) also collecting guides must apply change overall patchwork (see example). tag_level string ('keep' 'new') indicate auto-tagging behave. See plot_annotation(). design Specification location areas layout. Can either specified text string concatenating calls area() together. See examples information use.","code":""},{"path":"https://elipousson.github.io/cards/reference/layout_cards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use patchwork to layout cards on a paper — layout_cards","text":"patchwork object","code":""},{"path":[]},{"path":"https://elipousson.github.io/cards/reference/layout_cards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use patchwork to layout cards on a paper — layout_cards","text":"","code":"layout_cards(   card = plot_cards(\"Poker\", 6),   paper = \"letter\" )"},{"path":"https://elipousson.github.io/cards/reference/paper_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard paper and image sizes — paper_sizes","title":"Standard paper and image sizes — paper_sizes","text":"Reference table standard paper, postcard, photo print, social media image sizes, playing card sizes get_page(). Derived visioguy/PaperSizes repo, Adobe UK guide photo sizes sources. Data identical data included sfext package.","code":""},{"path":"https://elipousson.github.io/cards/reference/paper_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard paper and image sizes — paper_sizes","text":"","code":"paper_sizes"},{"path":"https://elipousson.github.io/cards/reference/paper_sizes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard paper and image sizes — paper_sizes","text":"data frame 123 rows 9 variables: name Name paper series Series standard Standard size Size series units Units (\"\", \"mm\", \"px\") dimensions width Width units height Height units orientation Portrait (width less height), landscape, square type Type (paper, postcard, print, social)","code":""},{"path":"https://elipousson.github.io/cards/reference/plot_cards.html","id":null,"dir":"Reference","previous_headings":"","what":"Use ggplot to plot for one or more cards — plot_cards","title":"Use ggplot to plot for one or more cards — plot_cards","text":"Make plot cards.","code":""},{"path":"https://elipousson.github.io/cards/reference/plot_cards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use ggplot to plot for one or more cards — plot_cards","text":"","code":"plot_cards(   card,   n = 1,   orientation = \"portrait\",   number = FALSE,   color = \"white\",   size = 5,   family = NULL,   fill = \"gray20\",   border = FALSE,   inset = unit(c(5, 5), \"mm\"),   linetype = \"dashed\",   linewidth = 1,   text = NULL,   center = NULL )"},{"path":"https://elipousson.github.io/cards/reference/plot_cards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use ggplot to plot for one or more cards — plot_cards","text":"card Card name data.frame width height columns. n Number cards plot, Default: 1 orientation Card orientation, Default: 'portrait' number TRUE, add number card, Default: FALSE color Color number, text, border, Default: 'white' size Font size number text, Default: 5 family Font family number text, Default: 'Georgia' fill Length 1 2 character vector color name. length 2, first value assumed card fill second value assumed inset border fill. Default: 'gray20' border TRUE, add border card. Default: FALSE inset Unit numeric vector inset distance card border, Default: unit(c(5, 5), \"mm\"). inset numeric vector, expected percent relative card width height. linetype linetype card border, Default: 'dashed' linewidth linewidth card border, Default: 2 text Character vector card text, Default: NULL center Position card center, Default: c(0, 0)","code":""},{"path":"https://elipousson.github.io/cards/reference/plot_cards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use ggplot to plot for one or more cards — plot_cards","text":"list plot objects item list card.","code":""},{"path":"https://elipousson.github.io/cards/reference/plot_cards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use ggplot to plot for one or more cards — plot_cards","text":"","code":"plot_cards(\"Tarot\", n = 2, number = TRUE)[[2]]   plot_cards(\"Poker\", n = 1, number = TRUE, text = \"♡️\") #> [[1]]  #>"}]
